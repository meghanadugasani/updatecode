// <auto-generated />
using System;
using APILoanProduct.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APILoanProduct.Migrations
{
    [DbContext(typeof(context))]
    [Migration("20250905114945_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APILoanProduct.Models.AccountSettings", b =>
                {
                    b.Property<int>("settingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("settingId"));

                    b.Property<int>("MaximumAgeRequirement")
                        .HasColumnType("int");

                    b.Property<int>("MinimumAgeRequirement")
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("settingId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("AccountSettings");
                });

            modelBuilder.Entity("APILoanProduct.Models.InterestRate", b =>
                {
                    b.Property<string>("InterestId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Interesttype")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Penaltyrate")
                        .HasColumnType("float");

                    b.Property<double>("ProcessingFee")
                        .HasColumnType("float");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("interestRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InterestId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("interestRates");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanAmountDetails", b =>
                {
                    b.Property<string>("LoanAmountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("DefaultAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Tranches")
                        .HasColumnType("int");

                    b.Property<decimal>("maxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("minAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("LoanAmountId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("LoanAmountDetails");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanDocuments", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdditionalDocuments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressProof")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityProof")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomeProoof")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DocumentId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("LoanDocuments");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanProduct", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("ProductId");

                    b.ToTable("LoanProducts");
                });

            modelBuilder.Entity("APILoanProduct.Models.ProdAvailability", b =>
                {
                    b.Property<string>("AvailabilityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BranchId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductAvailabilityTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AvailabilityId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProdAvailability");
                });

            modelBuilder.Entity("APILoanProduct.Models.RepaymentDetails", b =>
                {
                    b.Property<string>("RepaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GracePeriodDays")
                        .HasColumnType("int");

                    b.Property<int>("MaximumTenure")
                        .HasColumnType("int");

                    b.Property<int>("MinimumTenure")
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RepaymentId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("RepaymentDetails");
                });

            modelBuilder.Entity("APILoanProduct.Models.AccountSettings", b =>
                {
                    b.HasOne("APILoanProduct.Models.LoanProduct", "LoanProduct")
                        .WithOne("AccountSettings")
                        .HasForeignKey("APILoanProduct.Models.AccountSettings", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("APILoanProduct.Models.InterestRate", b =>
                {
                    b.HasOne("APILoanProduct.Models.LoanProduct", "LoanProduct")
                        .WithOne("InterestRate")
                        .HasForeignKey("APILoanProduct.Models.InterestRate", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanAmountDetails", b =>
                {
                    b.HasOne("APILoanProduct.Models.LoanProduct", "LoanProduct")
                        .WithOne("LoanAmountDetails")
                        .HasForeignKey("APILoanProduct.Models.LoanAmountDetails", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanDocuments", b =>
                {
                    b.HasOne("APILoanProduct.Models.LoanProduct", "LoanProduct")
                        .WithOne("Documents")
                        .HasForeignKey("APILoanProduct.Models.LoanDocuments", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("APILoanProduct.Models.ProdAvailability", b =>
                {
                    b.HasOne("APILoanProduct.Models.LoanProduct", "LoanProduct")
                        .WithOne("ProdAvailability")
                        .HasForeignKey("APILoanProduct.Models.ProdAvailability", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("APILoanProduct.Models.RepaymentDetails", b =>
                {
                    b.HasOne("APILoanProduct.Models.LoanProduct", "LoanProduct")
                        .WithOne("RepaymentDetails")
                        .HasForeignKey("APILoanProduct.Models.RepaymentDetails", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanProduct", b =>
                {
                    b.Navigation("AccountSettings")
                        .IsRequired();

                    b.Navigation("Documents")
                        .IsRequired();

                    b.Navigation("InterestRate")
                        .IsRequired();

                    b.Navigation("LoanAmountDetails")
                        .IsRequired();

                    b.Navigation("ProdAvailability")
                        .IsRequired();

                    b.Navigation("RepaymentDetails")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
