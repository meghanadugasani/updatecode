// <auto-generated />
using System;
using APILoanProduct.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APILoanProduct.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20251021121029_removed underscore")]
    partial class removedunderscore
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APILoanProduct.Models.BranchModule.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("BranchIFSCcode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BranchLocation")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("BranchName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ManagerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BranchId");

                    b.HasIndex("ManagerUserId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("APILoanProduct.Models.BranchModule.BranchLoanProduct", b =>
                {
                    b.Property<int>("BranchLoanProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchLoanProductId"));

                    b.Property<DateTime>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BranchLoanProductId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ProductId");

                    b.ToTable("BranchLoanProducts");
                });

            modelBuilder.Entity("APILoanProduct.Models.InterestRate", b =>
                {
                    b.Property<Guid>("InterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DisbursementInterestrate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("InterestRates")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("InterestType")
                        .HasColumnType("int");

                    b.Property<double>("PenaltyRate")
                        .HasColumnType("float");

                    b.Property<decimal>("ProcessingFee")
                        .HasColumnType("decimal(8,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InterestId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("InterestRates");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanAmountDetails", b =>
                {
                    b.Property<Guid>("LoanAmountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DefaultAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tranches")
                        .HasColumnType("int");

                    b.HasKey("LoanAmountId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("LoanAmountDetails");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanApplications.LoanApplicantDetails", b =>
                {
                    b.Property<Guid>("ApplicantDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("AnnualIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmploymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ApplicantDetailsId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("LoanApplicantDetails");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanApplications.LoanApplication", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppliedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TenureYears")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserId");

                    b.ToTable("LoanApplications");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanApplications.LoanApplicationDocuments", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DocumentId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("LoanApplicationDocuments");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanApplications.LoanApplicationReview", b =>
                {
                    b.Property<Guid>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ManagerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Remarks")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ManagerUserId");

                    b.ToTable("LoanApplicationReviews");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanApplications.LoanDisbursement", b =>
                {
                    b.Property<Guid>("DisbursementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ApprovedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DisbursementAccount")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DisbursementDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.HasKey("DisbursementId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("LoanDisbursements");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanDocuments", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalDocuments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AddressProof")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IdentityProof")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("IncomeProof")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocumentId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("LoanDocuments");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountSettingsInterestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ProductId");

                    b.HasIndex("AccountSettingsInterestId");

                    b.ToTable("LoanProducts");
                });

            modelBuilder.Entity("APILoanProduct.Models.ProductAvailability", b =>
                {
                    b.Property<Guid>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductAvailabilityto")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AvailabilityId");

                    b.HasIndex("BranchId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductAvailabilities");
                });

            modelBuilder.Entity("APILoanProduct.Models.RepaymentDetails", b =>
                {
                    b.Property<Guid>("RepaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GracePerioddays")
                        .HasColumnType("int");

                    b.Property<int>("MaximumTenure")
                        .HasColumnType("int");

                    b.Property<int>("MinimumTenure")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RepaymentId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("RepaymentDetails");
                });

            modelBuilder.Entity("APILoanProduct.Models.Roles.RoleMaster", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<int>("RoleName")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.ToTable("RoleMasters");
                });

            modelBuilder.Entity("APILoanProduct.Models.Roles.UserMaster", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<decimal?>("UserBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserEmailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserPasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserMasters");
                });

            modelBuilder.Entity("APILoanProduct.Models.BranchModule.Branch", b =>
                {
                    b.HasOne("APILoanProduct.Models.Roles.UserMaster", "BranchManager")
                        .WithMany("ManagedBranches")
                        .HasForeignKey("ManagerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchManager");
                });

            modelBuilder.Entity("APILoanProduct.Models.BranchModule.BranchLoanProduct", b =>
                {
                    b.HasOne("APILoanProduct.Models.BranchModule.Branch", "Branch")
                        .WithMany("BranchLoanProducts")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APILoanProduct.Models.LoanProduct", "LoanProduct")
                        .WithMany("BranchLoanProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Branch");

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("APILoanProduct.Models.InterestRate", b =>
                {
                    b.HasOne("APILoanProduct.Models.LoanProduct", "LoanProduct")
                        .WithOne("InterestRate")
                        .HasForeignKey("APILoanProduct.Models.InterestRate", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanAmountDetails", b =>
                {
                    b.HasOne("APILoanProduct.Models.LoanProduct", "LoanProduct")
                        .WithOne("LoanAmountDetails")
                        .HasForeignKey("APILoanProduct.Models.LoanAmountDetails", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanApplications.LoanApplicantDetails", b =>
                {
                    b.HasOne("APILoanProduct.Models.LoanApplications.LoanApplication", "LoanApplication")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanApplication");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanApplications.LoanApplication", b =>
                {
                    b.HasOne("APILoanProduct.Models.BranchModule.Branch", "Branch")
                        .WithMany("Loan_Application")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("APILoanProduct.Models.Roles.UserMaster", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanApplications.LoanApplicationDocuments", b =>
                {
                    b.HasOne("APILoanProduct.Models.LoanApplications.LoanApplication", "LoanApplication")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanApplication");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanApplications.LoanApplicationReview", b =>
                {
                    b.HasOne("APILoanProduct.Models.LoanApplications.LoanApplication", "LoanApplication")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APILoanProduct.Models.Roles.UserMaster", "BranchManager")
                        .WithMany()
                        .HasForeignKey("ManagerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BranchManager");

                    b.Navigation("LoanApplication");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanApplications.LoanDisbursement", b =>
                {
                    b.HasOne("APILoanProduct.Models.LoanApplications.LoanApplication", "LoanApplication")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanApplication");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanDocuments", b =>
                {
                    b.HasOne("APILoanProduct.Models.LoanProduct", "LoanProduct")
                        .WithOne("Documents")
                        .HasForeignKey("APILoanProduct.Models.LoanDocuments", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanProduct", b =>
                {
                    b.HasOne("APILoanProduct.Models.InterestRate", "AccountSettings")
                        .WithMany()
                        .HasForeignKey("AccountSettingsInterestId");

                    b.Navigation("AccountSettings");
                });

            modelBuilder.Entity("APILoanProduct.Models.ProductAvailability", b =>
                {
                    b.HasOne("APILoanProduct.Models.BranchModule.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("APILoanProduct.Models.LoanProduct", "LoanProduct")
                        .WithOne("ProductAvailability")
                        .HasForeignKey("APILoanProduct.Models.ProductAvailability", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("APILoanProduct.Models.RepaymentDetails", b =>
                {
                    b.HasOne("APILoanProduct.Models.LoanProduct", "LoanProduct")
                        .WithOne("RepaymentDetails")
                        .HasForeignKey("APILoanProduct.Models.RepaymentDetails", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("APILoanProduct.Models.Roles.UserMaster", b =>
                {
                    b.HasOne("APILoanProduct.Models.Roles.RoleMaster", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("APILoanProduct.Models.BranchModule.Branch", b =>
                {
                    b.Navigation("BranchLoanProducts");

                    b.Navigation("Loan_Application");
                });

            modelBuilder.Entity("APILoanProduct.Models.LoanProduct", b =>
                {
                    b.Navigation("BranchLoanProducts");

                    b.Navigation("Documents");

                    b.Navigation("InterestRate");

                    b.Navigation("LoanAmountDetails");

                    b.Navigation("ProductAvailability");

                    b.Navigation("RepaymentDetails");
                });

            modelBuilder.Entity("APILoanProduct.Models.Roles.RoleMaster", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("APILoanProduct.Models.Roles.UserMaster", b =>
                {
                    b.Navigation("ManagedBranches");
                });
#pragma warning restore 612, 618
        }
    }
}
